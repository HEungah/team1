login.js
	userList[] -> 	유저정보를 저장하는 배열
	userList = [
		{id : 'kkk111' , pw : 123465}, {id : 'ppp222', pw : 123456} ...
]
	아이디 입력창과 비밀번호 입력창의 element 를 가져와서
	addEventListener("keyup", validate()) 를 실행
	
	
	login(){}	-> 	로그인 버튼을 눌렀을때 실행되는 함수

			userList배열에 저장된 정보와 input값으로 읽어온 정보가 같으면 로그인성공

			addEventListener("keyup", validate()) 함수 실행
			아이디 input태그와 비밀번호 input태그에 입력값이 있어야지 활성화된
			로그인버튼을 html으로 출력한다.

	validate(){} ->	아이디 입력창과 비밀번호입력창에서 입력중 키보드를 땠을 때 실행되는 함수

			아이디 입력창과 비밀번호 입력창에 값이 있는지 없는지 판단한다.
	
	join(){}	-> 	회원가입 버튼을 눌렀을때 실행되는 함수
			join.jsp로 이동한다.		


join.js
	userList[] -> 	유저정보를 저장하는 배열
	userList = [
		{id : id, pw : pw, email : email, phone : 000, emailReceive : false, smsReceive : false} ]
	
	join(){} -> 	가입하기 버튼을 눌렀을때 실행되는 함수

			아이디 중복상태를 판단하는 상태변수 redundancy 생성후 초기값으로 false 저장
			
			아이디 입력값과 userList 배열의 아이디를 비교하여 중복상태 판단후
			중복값이 아니면 redundancy에 true 값을 저장

			비밀번호 입력값과 비밀번호확인 입력값을 비교

			이메일 수신 동의 체크여부를 checked로 판단하여
			 emailReceive에 결과값 저장
			
			문자 수신 동의 체크여부를 checked로 판단하여
			smsReceive에 결과값 저장

admin.js
	userList[] -> 	유저정보를 저장하는 배열
	area[] -> 		지역명을 저장하는 배열
	favProduct[] ->	제품명을 저장하는 배열

	userList = [
		{userNo: 1, id : id, pw : pw, age : 25, area : 2, sex : 0, favProduct : 3, total : 130000]

	userListPrint(){} -> 	유저 정보를 출력하는 함수, admin.js 파일이 열렸을때 실행
	
			userList 배열의 길이만큼 userList 안의 유저 객체를 반복문으로 출력
	
	graphPrint(){} -> 	연령대, 지역, 성별 구역을 클릭했을때 실행되는 함수

			userList의 각 객체에서 age, area, sex 속성을 읽어와서
			html로 그래프 출력

	userInfo(){} ->	회원정보창의 각 회원을 클릭했을때 실행

			userList 배열의 각 객체에서 정보를 받아와 html 출력
			total의 값으로 회원 등급을 다르게 출력